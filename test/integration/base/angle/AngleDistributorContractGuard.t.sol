// SPDX-License-Identifier: MIT

pragma solidity 0.7.6;
pragma abicoder v2;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Test} from "forge-std/Test.sol";

import {AngleDistributorContractGuard} from "contracts/guards/contractGuards/AngleDistributorContractGuard.sol";
import {Governance} from "contracts/Governance.sol";
import {PoolLogic} from "contracts/PoolLogic.sol";
import {PoolManagerLogic} from "contracts/PoolManagerLogic.sol";
import {BaseConfig} from "test/integration/utils/foundry/config/BaseConfig.sol";

contract AngleDistributorContractGuardTest is Test {
  address public protocolDAOBaseMultisig = 0x4A83129Ce9C8865EF3f91Fc87130dA25b64F9100;
  Governance public protocolGovernanceBase = Governance(0x5f8DEe0D89c9acF30666C1A3cD92C996ca6c3B7B);

  PoolLogic public torosBtcBull3XBase = PoolLogic(0xCAF08BF08D0c87e2c74dd9EBEC9C776037bD7e8E);
  PoolLogic public randomEmptyVault = PoolLogic(0x81aa173aA96642C073ee55f7887E032A1d24958E);

  address public angleDistributorBaseContract = 0x3Ef3D8bA38EBe18DB133cEc108f4D14CE00Dd9Ae;
  address public aBasUSDC = 0x4e65fE4DbA92790696d040ac24Aa414708F5c0AB; // Aave Base USDC

  function setUp() public {
    vm.createSelectFork("base", 24787344);

    AngleDistributorContractGuard contractGuard = new AngleDistributorContractGuard(
      BaseConfig.AAVE_V3_LENDING_POOL,
      aBasUSDC
    );

    vm.prank(protocolDAOBaseMultisig);
    protocolGovernanceBase.setContractGuard(angleDistributorBaseContract, address(contractGuard));
  }

  function test_revert_claim_not_for_vault() public {
    bytes
      memory data = hex"71ee95c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e65fe4dba92790696d040ac24aa414708f5c0ab0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000ce6b485000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010db2019f08a03f07d7582f3f3dc1adc5771cf3e14b3f6324b6a433afe89c599523286cc8f113dff0d4e8f5ae0c74eea04c92d86ef47f850364dc23a262e0ce5c9e66136faec15aa71876e9c31b2274eb9a7051a6f1af62285d881c149f2c57b9275133ba7ad91441f7deb50ba4988b2adf7f2f966cb30bd1d147b35643c565ebf6f37902093d333154f178fd084e1b679b2a54e9b298b4b62a353a4f61e238d9711305cbc1d623b9106a76cff8cb6b6bd26b75d6333911ef4d490d96aa48893f64b9c66ed8cbbdd17cb88790346f0caad598627d2135f21c142a9e0267f835fbf02a1ce511ba489942679a4aa46908fd24988b1bed58ee265e28ff4a252fe2513984dbb2fd3ef97f282d1ece563eff8691dcaceb45276be591eabbe0266c74eabe1efea9b86d900cfe450db891f3d7225bdbb627fd19e2f861145a645fae05ef5c18431e64b8f089ff3e8c3feaf562b44c43321460421146fc06fb0d4f70340b43f49c54970d79b2ed767ec45fb77fa0439960a84781039dcfab17afeac5ba215ee61abf2d19e855a91dacc3158f641c3ce1641a076c1f20901f312585f0f67a42f360393a879e4d5a195f4525f74509deed1b0aab22e8e2327105b8e4d337a9aa8624997e24feb2bcff906a77f917da7bf84164a57fd13c3fb3e0afacd28399eb53d44fe84f1581a98e4a3e00ce81c7dcf4a2d28439d95334c28033ef5e35cb0";

    vm.expectRevert("recipient is not pool");
    torosBtcBull3XBase.execTransaction(angleDistributorBaseContract, data);
  }

  function test_revert_claim_unknown_reward_token() public {
    bytes
      memory data = hex"71ee95c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000caf08bf08d0c87e2c74dd9ebec9c776037bd7e8e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000ce6b485000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010db2019f08a03f07d7582f3f3dc1adc5771cf3e14b3f6324b6a433afe89c599523286cc8f113dff0d4e8f5ae0c74eea04c92d86ef47f850364dc23a262e0ce5c9e66136faec15aa71876e9c31b2274eb9a7051a6f1af62285d881c149f2c57b9275133ba7ad91441f7deb50ba4988b2adf7f2f966cb30bd1d147b35643c565ebf6f37902093d333154f178fd084e1b679b2a54e9b298b4b62a353a4f61e238d9711305cbc1d623b9106a76cff8cb6b6bd26b75d6333911ef4d490d96aa48893f64b9c66ed8cbbdd17cb88790346f0caad598627d2135f21c142a9e0267f835fbf02a1ce511ba489942679a4aa46908fd24988b1bed58ee265e28ff4a252fe2513984dbb2fd3ef97f282d1ece563eff8691dcaceb45276be591eabbe0266c74eabe1efea9b86d900cfe450db891f3d7225bdbb627fd19e2f861145a645fae05ef5c18431e64b8f089ff3e8c3feaf562b44c43321460421146fc06fb0d4f70340b43f49c54970d79b2ed767ec45fb77fa0439960a84781039dcfab17afeac5ba215ee61abf2d19e855a91dacc3158f641c3ce1641a076c1f20901f312585f0f67a42f360393a879e4d5a195f4525f74509deed1b0aab22e8e2327105b8e4d337a9aa8624997e24feb2bcff906a77f917da7bf84164a57fd13c3fb3e0afacd28399eb53d44fe84f1581a98e4a3e00ce81c7dcf4a2d28439d95334c28033ef5e35cb0";

    vm.expectRevert("reward not supported");
    torosBtcBull3XBase.execTransaction(angleDistributorBaseContract, data);
  }

  function test_revert_claim_when_aave_asset_not_supported() public {
    bytes
      memory data = hex"71ee95c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000081aa173aA96642C073ee55f7887E032A1d24958E00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e65fe4dba92790696d040ac24aa414708f5c0ab0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000ce6b485000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010db2019f08a03f07d7582f3f3dc1adc5771cf3e14b3f6324b6a433afe89c599523286cc8f113dff0d4e8f5ae0c74eea04c92d86ef47f850364dc23a262e0ce5c9e66136faec15aa71876e9c31b2274eb9a7051a6f1af62285d881c149f2c57b9275133ba7ad91441f7deb50ba4988b2adf7f2f966cb30bd1d147b35643c565ebf6f37902093d333154f178fd084e1b679b2a54e9b298b4b62a353a4f61e238d9711305cbc1d623b9106a76cff8cb6b6bd26b75d6333911ef4d490d96aa48893f64b9c66ed8cbbdd17cb88790346f0caad598627d2135f21c142a9e0267f835fbf02a1ce511ba489942679a4aa46908fd24988b1bed58ee265e28ff4a252fe2513984dbb2fd3ef97f282d1ece563eff8691dcaceb45276be591eabbe0266c74eabe1efea9b86d900cfe450db891f3d7225bdbb627fd19e2f861145a645fae05ef5c18431e64b8f089ff3e8c3feaf562b44c43321460421146fc06fb0d4f70340b43f49c54970d79b2ed767ec45fb77fa0439960a84781039dcfab17afeac5ba215ee61abf2d19e855a91dacc3158f641c3ce1641a076c1f20901f312585f0f67a42f360393a879e4d5a195f4525f74509deed1b0aab22e8e2327105b8e4d337a9aa8624997e24feb2bcff906a77f917da7bf84164a57fd13c3fb3e0afacd28399eb53d44fe84f1581a98e4a3e00ce81c7dcf4a2d28439d95334c28033ef5e35cb0";

    vm.expectRevert("enable reward token");
    randomEmptyVault.execTransaction(angleDistributorBaseContract, data);
  }

  function test_anyone_can_claim_for_vault() public {
    uint256 aBasUSDCBalanceBefore = IERC20(aBasUSDC).balanceOf(address(torosBtcBull3XBase));
    PoolManagerLogic poolManagerLogic = PoolManagerLogic(torosBtcBull3XBase.poolManagerLogic());
    uint256 totalFundValueBefore = poolManagerLogic.totalFundValue();

    bytes
      memory data = hex"71ee95c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000caf08bf08d0c87e2c74dd9ebec9c776037bd7e8e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e65fe4dba92790696d040ac24aa414708f5c0ab0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000ce6b485000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010db2019f08a03f07d7582f3f3dc1adc5771cf3e14b3f6324b6a433afe89c599523286cc8f113dff0d4e8f5ae0c74eea04c92d86ef47f850364dc23a262e0ce5c9e66136faec15aa71876e9c31b2274eb9a7051a6f1af62285d881c149f2c57b9275133ba7ad91441f7deb50ba4988b2adf7f2f966cb30bd1d147b35643c565ebf6f37902093d333154f178fd084e1b679b2a54e9b298b4b62a353a4f61e238d9711305cbc1d623b9106a76cff8cb6b6bd26b75d6333911ef4d490d96aa48893f64b9c66ed8cbbdd17cb88790346f0caad598627d2135f21c142a9e0267f835fbf02a1ce511ba489942679a4aa46908fd24988b1bed58ee265e28ff4a252fe2513984dbb2fd3ef97f282d1ece563eff8691dcaceb45276be591eabbe0266c74eabe1efea9b86d900cfe450db891f3d7225bdbb627fd19e2f861145a645fae05ef5c18431e64b8f089ff3e8c3feaf562b44c43321460421146fc06fb0d4f70340b43f49c54970d79b2ed767ec45fb77fa0439960a84781039dcfab17afeac5ba215ee61abf2d19e855a91dacc3158f641c3ce1641a076c1f20901f312585f0f67a42f360393a879e4d5a195f4525f74509deed1b0aab22e8e2327105b8e4d337a9aa8624997e24feb2bcff906a77f917da7bf84164a57fd13c3fb3e0afacd28399eb53d44fe84f1581a98e4a3e00ce81c7dcf4a2d28439d95334c28033ef5e35cb0";

    torosBtcBull3XBase.execTransaction(angleDistributorBaseContract, data);

    uint256 aBasUSDCBalanceAfter = IERC20(aBasUSDC).balanceOf(address(torosBtcBull3XBase));
    uint256 totalFundValueAfter = poolManagerLogic.totalFundValue();

    assertGt(aBasUSDCBalanceAfter, aBasUSDCBalanceBefore);
    assertGt(totalFundValueAfter, totalFundValueBefore);
  }
}
